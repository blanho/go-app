# .github/workflows/azure-deploy.yml
name: Deploy to Azure

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'
        
    - name: Run tests
      run: go test -v ./... -coverprofile=coverage.txt
      
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.txt

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'
        
    - name: Login to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.ACR_LOGIN_SERVER }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}
        
    - name: Build and Push Docker image
      run: |
        VERSION=$(echo $GITHUB_SHA | cut -c1-8)
        docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/azure-go-app:$VERSION .
        docker push ${{ secrets.ACR_LOGIN_SERVER }}/azure-go-app:$VERSION
        echo "IMAGE_TAG=$VERSION" >> $GITHUB_ENV

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: production
    steps:
    - uses: actions/checkout@v3
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Set AKS context
      uses: azure/aks-set-context@v3
      with:
        resource-group: ${{ secrets.AKS_RESOURCE_GROUP }}
        cluster-name: ${{ secrets.AKS_CLUSTER_NAME }}
        
    - name: Deploy to AKS
      run: |
        # Update Kubernetes manifests with new image tag
        sed -i 's|image:.*|image: ${{ secrets.ACR_LOGIN_SERVER }}/azure-go-app:${{ env.IMAGE_TAG }}|' ./deploy/kubernetes/deployment.yaml
        
        # Apply Kubernetes manifests
        kubectl apply -f ./deploy/kubernetes/
        
        # Wait for deployment to complete
        kubectl rollout status deployment/azure-go-app -n production
        
    - name: Run Post-Deployment Tests
      run: |
        # Wait for service to be ready
        sleep 30
        
        # Run integration tests against the deployed service
        ENDPOINT=$(kubectl get svc azure-go-app -n production -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        curl -f http://$ENDPOINT/health